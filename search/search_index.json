{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Gurjaka's Dotfiles \ud83e\udde9\u2728 Welcome to my personal dotfiles repository!  Here you\u2019ll find my minimal, suckless, and Wayland-first configuration for NixOS and daily dev tools \u2014 carefully crafted to boost productivity speed, and maintainability \ud83d\ude80\ud83d\udcbb"},{"location":"#system-overview","title":"\u2699\ufe0f System Overview \ud83d\udda5\ufe0f\ud83d\udd27","text":"<p>This setup is built to be modern, efficient, and elegant, with a focus on keyboard-driven workflows and reproducible environments:</p> <ul> <li> <p>Linux Kernel \ud83d\udc27   Powered by the Zen kernel, optimized for desktop responsiveness, gaming performance, and low latency. It\u2019s the core that keeps everything running smooth and fast.</p> </li> <li> <p>Window Manager \ud83e\ude9f\ud83c\udf9b\ufe0f   Using Qtile with an experimental Wayland backend. Qtile is a dynamic tiling window manager written in Python, designed for total keyboard control and customization. The Wayland backend delivers modern, secure, and smooth graphical performance.</p> </li> <li> <p>Terminal Emulators \ud83d\uddb1\ufe0f\u2328\ufe0f  </p> </li> <li><code>Foot</code>: A Wayland-native, minimal terminal emulator with great performance.  </li> <li> <p><code>Ghostty</code>: GPU-accelerated, feature-rich terminal for daily use.</p> </li> <li> <p>Shells \ud83d\udc1a   I primarily use <code>Fish</code> for its user-friendly features and smart completions, alongside <code>Zsh</code> for compatibility and scripting power.</p> </li> <li> <p>Notifier \ud83d\udd14 <code>SwayNC</code> handles notifications seamlessly within the Wayland ecosystem, keeping distractions minimal and information clear.</p> </li> </ul>"},{"location":"#development-tools-overview","title":"\ud83d\udcbb Development Tools Overview \ud83d\udd28\ud83d\udee0\ufe0f","text":"<p>The environment is designed for fast, distraction-free coding and system management:</p> <ul> <li> <p>Browser \ud83c\udf10 <code>Librewolf</code> \u2014 a privacy-focused, open-source browser that respects user freedom.</p> </li> <li> <p>Editors \u270d\ufe0f  </p> </li> <li>GUI: <code>VSCode</code> for heavy lifting and GUI convenience.  </li> <li> <p>Terminal: <code>Neovim</code> with custom plugin setups, LSP integration, and thematic consistency for an efficient terminal editing experience.</p> </li> <li> <p>Git Helper \ud83d\udd04 <code>Lazygit</code> offers a fast, intuitive interface for managing Git workflows right in your terminal.</p> </li> <li> <p>File Managers \ud83d\udcc1  </p> </li> <li>Terminal: <code>Yazi</code> for quick file navigation without leaving the keyboard.  </li> <li> <p>GUI: <code>Thunar</code> for graphical file operations when needed.</p> </li> <li> <p>System Monitor \ud83d\udcca <code>Btop</code> provides an interactive and visually appealing resource monitor.</p> </li> <li> <p>Screenshot Tool \ud83d\udcf8 <code>Flameshot</code> for customizable screenshots with ease.</p> </li> </ul>"},{"location":"#theme-philosophy","title":"\ud83c\udfa8 Theme &amp; Philosophy \ud83c\udfad\ud83c\udf08","text":"<p>This dotfiles collection is a harmonious blend of aesthetics and function:</p> <p>Visual style inspired by the \u2744\ufe0f Nord theme\u2019s icy calmness combined with the \ud83c\udf32 Everforest palette\u2019s warm, organic tones \u2014 creating a balanced and visually comfortable workspace.</p> <p>Core values:</p> <ul> <li> <p>Simplicity \ud83e\uddf9   Every line of config has a purpose \u2014 no unnecessary fluff or bloat.</p> </li> <li> <p>Speed \u26a1   Fast startup times, snappy interactions, and smooth workflows to keep you in the zone.</p> </li> <li> <p>Maintainability \ud83d\udee1\ufe0f   Modular, declarative, and reproducible with the power of Nix and Home Manager.</p> </li> <li> <p>Wayland-first \ud83d\ude80   Embracing the future of Linux display protocols for improved security, performance, and flexibility.</p> </li> </ul>          This configuration blends the \u2744\ufe0f Nord         theme's icy calmness with the earthy tones of \ud83c\udf32 Everforest.        <p>Nord Palette</p> <p>Everforest Palette</p> <p> </p>"},{"location":"#whats-next","title":"\ud83d\ude80 What\u2019s Next?","text":"<p>Dive into the sections to explore:</p> <ul> <li>\ud83e\ude9f Qtile config and customizations  </li> <li>\u270d\ufe0f Neovim setup, plugins, and LSP details  </li> <li>\ud83d\udda5\ufe0f Terminal and shell environment configs  </li> <li>\ud83d\udce6 Nix flakes, home-manager modules, and reproducibility  </li> <li>\ud83d\udee0\ufe0f Utilities, scripts, and workflow tips</li> </ul> <p>\u2014 Gurami Esartia \u270c\ufe0f</p>"},{"location":"installation/","title":"\u2744\ufe0f NixOS + Dotfiles Installation Guide","text":""},{"location":"installation/#step-0-base-nixos-installation","title":"\ud83e\uddca Step 0: Base NixOS Installation","text":"<p>To begin, install a minimal NixOS setup. Follow the official guide below: \ud83d\udcda NixOS Btrfs Installation Guide</p> <p>Once you're done and have rebooted into your system, proceed with the steps below.</p>"},{"location":"installation/#step-1-clone-dotfiles","title":"\ud83d\ude80 Step 1: Clone Dotfiles","text":"<pre><code>git clone https://github.com/Gurjaka/Dotfiles.git ~/\n</code></pre>"},{"location":"installation/#step-2-configure-flakenix","title":"\u2699\ufe0f Step 2: Configure flake.nix","text":"<p>Open the file <code>~/Dotfiles/flake.nix</code> and edit the following fields:</p> <ul> <li>\ud83d\udda5\ufe0f <code>hostname</code></li> <li>\ud83d\udc64 <code>username</code></li> <li>\ud83d\udcbd <code>drivers</code> (e.g. <code>nvidia</code>, <code>amd</code>, or <code>intel</code>)</li> </ul> <p>You should also copy your system\u2019s hardware config:</p> <pre><code>cp /etc/nixos/hardware-configuration.nix ~/Dotfiles/nixos/\n</code></pre>"},{"location":"installation/#step-3-apply-the-config","title":"\ud83d\udd04 Step 3: Apply the Config","text":"<p>Run the following commands to apply the system and home configurations:</p> <pre><code># System config\nsudo nixos-rebuild switch --flake ~/Dotfiles#YOUR_HOSTNAME\n\n# Home manager config\nnix run home-manager -- switch --flake ~/Dotfiles#YOUR_USERNAME\n</code></pre> <p>\ud83d\udca1 Replace <code>YOUR_HOSTNAME</code> and <code>YOUR_USERNAME</code> accordingly.</p>"},{"location":"installation/#step-4-vivaldi-note-if-used","title":"\ud83e\uddfc Step 4: Vivaldi Note (If Used)","text":"<p>If your preferred browser is Vivaldi, make sure to launch it once manually to generate its configuration directories.</p> <p>Then, re-run the home-manager switch:</p> <pre><code>nix run home-manager -- switch --flake ~/Dotfiles#YOUR_USERNAME\n</code></pre> <p>This will allow Vivaldi's preconfigured settings to be applied cleanly.</p>"},{"location":"installation/#step-5-secrets-with-agenix","title":"\ud83d\udd10 Step 5: Secrets with agenix","text":"<p>If you are using secrets (like API tokens, SSH keys, etc.), your dotfiles may include a <code>secrets/</code> directory managed via agenix.</p>"},{"location":"installation/#step-6-confirm-everything-works","title":"\u2705 Step 6: Confirm Everything Works","text":"<p>After setup, verify the following:</p> <ul> <li>\ud83c\udfa8 Theme applied (Nord/Everforest)</li> <li>\ud83e\udde0 Qtile working with custom bar + widgets</li> <li>\ud83d\udda5\ufe0f Terminal (Kitty / Foot) themed and functional</li> <li>\ud83d\udc1f Fish or Zsh shell initialized properly</li> <li>\ud83d\udca1 Notification daemon (<code>SwayNC</code>) running on Wayland</li> <li>\ud83d\udd24 Neovim opens with correct LSPs and theme</li> <li>\ud83e\uddfe Scripts and aliases available in terminal (<code>alias</code>, <code>l</code>, <code>hs</code>, etc.)</li> </ul> <p>\u26a0\ufe0f If anything breaks, try rebuilding again. If you see missing permissions, check your user in the secrets or <code>flake.nix</code>.</p> <p>Enjoy your aesthetic &amp; powerful NixOS setup! \ud83c\udf32\u2744\ufe0f</p>"},{"location":"kb-layout/","title":"\u2328\ufe0f Keyboard Layout Notice: Programmer\u2019s Dvorak \u26a1\ufe0f","text":"<p>\u26a0\ufe0f Heads up! This setup uses the Programmer's Dvorak layout system-wide. If your keys feel \u201cscrambled\u201d \u2014 don\u2019t worry, it\u2019s intentional. \ud83d\ude09\ud83c\udfaf</p>"},{"location":"kb-layout/#what-is-programmers-dvorak","title":"\ud83d\udca1 What Is Programmer\u2019s Dvorak? \ud83e\udde0","text":"<p>Programmer\u2019s Dvorak is a variant of the Dvorak keyboard layout designed specifically for programmers. It places symbols like <code>{ } [ ] ( )</code> and operators like <code>= + - * /</code> in more convenient locations, optimizing coding flow and reducing finger travel. \ud83d\ude80\ud83d\udcbb</p> <p>It\u2019s different from:</p> <ul> <li>\ud83e\udde0 QWERTY \u2013 Standard for most users.</li> <li>\u270d\ufe0f Dvorak \u2013 Typing-optimized layout.</li> <li>\ud83d\udd27 Programmer\u2019s Dvorak \u2013 Typing and coding optimized.</li> </ul> <p>This might feel a bit \"what the hell is this\" to newcomers. \ud83d\ude05</p>"},{"location":"kb-layout/#layout-preview","title":"\ud83d\uddbc\ufe0f Layout Preview","text":"<p>\ud83d\udd17 Wikipedia: Programmer Dvorak \ud83d\udd17 Visualizer: Keymap Drawer</p>"},{"location":"kb-layout/#how-to-switch-back","title":"\ud83d\udee0\ufe0f How to Switch Back \ud83d\udd04","text":"<p>If you're not used to it and just want your usual QWERTY back, here\u2019s how to fix it:</p>"},{"location":"kb-layout/#on-nixos","title":"\ud83d\udd76\ufe0f On NixOS","text":"<p>Edit your Home Manager config (usually <code>nixos/modules/xserver.nix</code>):</p> <pre><code>{\n  services.xserver = {\n    xkb.variant = \"dvp\"; # change this to \"us\" for QWERTY\n  };\n}\n</code></pre>"},{"location":"kb-layout/#qtile-layout-indicator","title":"\ud83d\udcbb Qtile Layout Indicator \ud83c\udf9b\ufe0f","text":"<p>The bar uses a <code>KeyboardLayout</code> widget to toggle between layouts. Here's the relevant snippet from <code>home-manager/modules/desktop/qtile/src/widgets.py</code> (Line 145):</p> <pre><code>    widget.KeyboardLayout(\n        fmt=\"{} \",\n        foreground=colors[\"base09\"],\n        configured_keyboards=[\"us dvp\", \"ge\", \"us\"],  # remove \"us dvp\" to avoid Dvorak\n        display_map={\n            \"us dvp\": \"DVP\",\n            \"ge\": \"GE\",\n            \"us\": \"US\"\n        },\n        option=\"caps:escape\",\n        **powerline(\"back_slash\"),\n    ),\n</code></pre> <p>\ud83d\udd04 Use <code>Shift + Tab</code> to toggle layouts at runtime.  \u2705 Default is DVP, but you can remove it from <code>configured_keyboards</code> if you want.</p>"},{"location":"kb-layout/#heads-up","title":"\ud83e\udde0 Heads-up \u26a1\ufe0f","text":"<ul> <li>\ud83e\uddf9 Caps Lock is Escape via <code>option=\"caps:escape\"</code> \u2014 change it if you want.  </li> <li>\ud83c\udf9b\ufe0f Both QWERTY and DVP layouts coexist for easy toggling and compatibility.</li> </ul>"},{"location":"kb-layout/#why-i-use-it","title":"\ud83e\udde0 Why I Use It \ud83c\udfaf","text":"<ul> <li>\ud83d\ude80 Faster coding ergonomics</li> <li>\ud83e\uddd8\u200d\u2642\ufe0f Less finger strain &amp; fatigue</li> <li>\ud83d\ude0e Feels hacker-core cool</li> </ul> <p>Perfectly baked into my workflow, especially with modal editors like Neovim. \ud83d\udd25</p>"},{"location":"kb-layout/#changing-it-system-wide-nixos-example","title":"\ud83e\ude9b Changing It System-Wide (NixOS example) \ud83d\udd27","text":"<p>Want to ditch DVP for good?</p> <pre><code>{\n  services.xserver = {\n    layout = \"us\";\n    xkbVariant = \"\"; # empty string means default\n  };\n}\n</code></pre>"},{"location":"kb-layout/#tldr","title":"\ud83d\udccc TL;DR \u26a1\ufe0f","text":"Layout Seen Reaction What to Do Programmer's Dvorak \ud83d\ude30 Confused Run <code>setxkbmap us</code> Want to keep it? \ud83d\ude0e All good Learn &amp; enjoy"},{"location":"kb-layout/#resources-to-learn","title":"\ud83e\udde0 Resources to Learn \ud83d\udcda","text":"<ul> <li>\ud83d\udcda TypingClub Dvorak Course</li> <li>\ud83c\udf93 Learn Dvorak / Programmer's Dvorak</li> <li>\u2328\ufe0f Keyboard Layout Editor</li> </ul> <p>\u26a0\ufe0f If you\u2019re setting up this repo, this layout is active by default. You\u2019ve been warned. \ud83e\udee1 Happy typing! \ud83d\udc27\u2728</p>"},{"location":"neovim/","title":"Neovim Setup \u2728\ud83c\udfaf\ud83d\udcdd","text":"<p>Welcome to the heart of my terminal editing workflow \u2014 Neovim, fully pimped and optimized for speed, clarity, and power. \ud83d\ude80\ud83d\udda5\ufe0f\u26a1</p>"},{"location":"neovim/#core-configuration","title":"\ud83d\udee0\ufe0f Core Configuration \ud83d\udd27","text":"<ul> <li>Enabled via Nix \ud83d\udc27: Neovim is managed declaratively through Nix, ensuring reproducibility and ease of updates.</li> <li>Aliases &amp; Defaults \ud83d\udd04: <code>nvim</code> is set as the default editor, with aliases for <code>vi</code>, <code>vim</code>, and <code>vimdiff</code> for convenience.</li> <li>Lua-powered \ud83d\udc0d: The entire config is Lua-based, stored in <code>~/Dotfiles/home-manager/modules/cli/nvim/lua</code> for modularity and performance.</li> </ul>"},{"location":"neovim/#theme-appearance","title":"\ud83c\udfa8 Theme &amp; Appearance \ud83c\udf08","text":"<ul> <li>Nord &amp; Everforest \u2744\ufe0f\ud83c\udf32: I blend the calm, cool Nord colorscheme with the cozy, organic Everforest palette.</li> <li> <p>Custom Settings \u2699\ufe0f:</p> </li> <li> <p><code>g:nord_contrast = true</code> \ud83d\udd33 \u2014 enhanced contrast for better readability</p> </li> <li><code>g:nord_borders = false</code> \ud83d\udeab \u2014 minimal borders for clean UI</li> <li><code>g:nord_disable_background = false</code> \ud83d\uddbc\ufe0f \u2014 keep the background</li> <li><code>g:nord_italic = false</code> \ud83d\udeab \u2014 no italics to avoid distractions</li> <li><code>g:nord_uniform_diff_background = true</code> \ud83c\udfa8 \u2014 consistent diff backgrounds</li> <li><code>g:nord_bold = false</code> \u2716\ufe0f \u2014 subtle bold text</li> </ul>"},{"location":"neovim/#plugins-features","title":"\ud83d\udd0c Plugins &amp; Features \u26a1\u2728","text":"<p>I use a curated set of plugins to supercharge coding and navigation:</p>"},{"location":"neovim/#completion-snippets","title":"Completion &amp; Snippets \ud83e\udd16\ud83d\udca1","text":"<ul> <li><code>nvim-cmp</code> &amp; <code>cmp-nvim-lsp</code> for smart autocompletion</li> <li><code>luasnip</code> + <code>friendly-snippets</code> for powerful snippet support</li> </ul>"},{"location":"neovim/#ui-enhancements","title":"UI Enhancements \ud83c\udf1f\ud83d\udda5\ufe0f","text":"<ul> <li><code>alpha-nvim</code> \u2014 Custom startup dashboard \ud83d\udeaa</li> <li><code>lualine-nvim</code> \u2014 Fancy statusline with useful info \ud83d\udcca</li> <li><code>indent-blankline-nvim</code> \u2014 Visually clean indentation guides \u21aa\ufe0f</li> <li><code>nvim-notify</code> \u2014 Notification system \ud83d\udd14</li> </ul>"},{"location":"neovim/#navigation-search","title":"Navigation &amp; Search \ud83d\udd0d\ud83d\ude80","text":"<ul> <li><code>telescope-nvim</code> \u2014 Fuzzy finder powerhouse \ud83d\udd2d</li> <li><code>nvim-tree-lua</code> \u2014 File explorer \ud83d\udcc1</li> <li><code>vim-visual-multi</code> \u2014 Multi-cursor editing \u270d\ufe0f</li> </ul>"},{"location":"neovim/#code-language-support","title":"Code &amp; Language Support \ud83e\uddd1\u200d\ud83d\udcbb\ud83d\udcbb","text":"<ul> <li><code>nvim-lspconfig</code> for LSP setup supporting multiple languages \ud83c\udf10</li> <li>Language servers like <code>ccls</code>, <code>clang-tools</code>, <code>gopls</code>, <code>pyright</code>, <code>lua-language-server</code>, <code>typescript-language-server</code>, and more installed as extra packages \ud83d\udce6</li> <li>Treesitter parsers for Bash, C, C++, Go, Lua, Python, PHP, JSON, YAML, and others for syntax highlighting and code awareness \ud83c\udf33</li> </ul>"},{"location":"neovim/#quality-of-life","title":"Quality of Life \ud83e\uddf9\ud83d\udee0\ufe0f","text":"<ul> <li><code>conform-nvim</code> \u2014 formatting support \ud83e\uddfc</li> <li><code>nix-develop-nvim</code> \u2014 handy Nix development integration \ud83d\udc27</li> <li><code>noice-nvim</code> \u2014 enhanced command-line UI \ud83d\udcac</li> <li><code>render-markdown-nvim</code> &amp; <code>markdown-preview-nvim</code> for Markdown editing \ud83d\udcdd</li> </ul>"},{"location":"neovim/#extra-packages","title":"\ud83c\udfd7\ufe0f Extra Packages \ud83d\udce6","text":"<p>The config extends Neovim\u2019s power with language servers and tools installed at the system level, providing:</p> <ul> <li>Robust language support for C, Go, Lua, Python, TypeScript, and more \ud83d\udee0\ufe0f</li> <li>Linters like <code>ruff</code> for Python \ud83d\udc0d</li> <li>Tools like <code>nixd</code> for Nix language support \u2744\ufe0f</li> </ul>"},{"location":"neovim/#why-this-setup","title":"Why This Setup? \ud83e\udd14\ud83d\udca1","text":"<ul> <li>Reproducible &amp; Portable \ud83c\udf0d: Configured declaratively through Nix to keep your setup consistent across machines.</li> <li>Performance Focused \u26a1: Lua-based config with minimal overhead, optimized for smooth operation.</li> <li>Balanced Look &amp; Feel \ud83c\udfa8: Clean, distraction-free UI with powerful features always within reach.</li> <li>Developer Productivity \ud83d\ude80: All your essential tools and workflows integrated seamlessly.</li> </ul> <p>Ready to dive deeper? \ud83d\udd25 Check out the <code>lua</code> directory for all the juicy config details! \ud83d\udc0d\u26a1</p>"},{"location":"nix/","title":"Nix &amp; Flakes \u2699\ufe0f\u2744\ufe0f\u2728","text":"<p>My entire system and user environment are declaratively managed with Nix \u2014 the ultimate package manager and build system that brings reproducibility, reliability, and insane flexibility. \ud83d\udd25\ud83d\udee0\ufe0f\ud83d\udcbb</p>"},{"location":"nix/#why-nix","title":"\ud83d\udd25 Why Nix? \ud83d\ude80","text":"<ul> <li> <p>Declarative Configuration \ud83d\udcdc\u270d\ufe0f   Everything is described in code \u2014 from system services \ud83d\udda5\ufe0f to user apps \ud83d\udce6 \u2014 so I can rebuild my entire setup effortlessly or roll back changes \u23ea in seconds.</p> </li> <li> <p>Reproducibility &amp; Portability \ud83c\udf0d\u2708\ufe0f   The exact same environment can be replicated on any Nix-enabled machine, making setups consistent and hassle-free. \ud83d\udd04\ud83d\udca1</p> </li> <li> <p>Powerful Package Management \ud83d\udce6\ud83d\udca5   Nix isolates dependencies, allowing multiple versions of the same app or library \ud83d\udcda without conflicts \u2014 goodbye \u201cdependency hell\u201d \ud83d\udd25\ud83d\ude35\u200d\ud83d\udcab.</p> </li> </ul>"},{"location":"nix/#flake-based-setup","title":"\ud83d\udee0\ufe0f Flake-Based Setup \u2744\ufe0f\ud83d\udd17","text":"<p>I use Nix flakes, the modern way to manage Nix projects, bringing:</p> <ul> <li>Immutable, version-controlled configurations \ud83d\udd12\ud83d\udcdd</li> <li>Easy integration with GitHub and other sources \ud83c\udf10\ud83d\udc19</li> <li>Simplified sharing and updating of modules \u2699\ufe0f\ud83d\udd04</li> </ul> <p>My <code>flake.nix</code> ties everything together: system config, home-manager modules \ud83c\udfe1, dotfiles syncing \ud83d\udd04, and even custom scripts \ud83e\udd16.</p>"},{"location":"nix/#home-manager-integration","title":"\u2699\ufe0f Home Manager Integration \ud83c\udfe1\u2728","text":"<p>Managing user-specific config (shell \ud83d\udc1a, editor \u270d\ufe0f, terminal \ud83d\udda5\ufe0f, etc.) declaratively with Home Manager lets me keep:</p> <ul> <li>Shell configs like Fish \ud83d\udc20 and Zsh \ud83e\udda6</li> <li>Neovim setup and plugins \ud83c\udfa8\ud83c\udfaf</li> <li>Terminal and prompt settings \ud83d\udda5\ufe0f\u26a1</li> <li>Handy scripts and aliases \ud83e\uddf0\ud83d\udcdd</li> </ul>"},{"location":"nix/#what-i-love-about-nix","title":"\ud83d\udcda What I Love About Nix \ud83d\udc96","text":"<ul> <li>\ud83d\udcaa Atomic upgrades &amp; rollbacks \u2014 no more \u201cit broke after update.\u201d \ud83d\udd27\ud83d\udee1\ufe0f</li> <li>\ud83d\udd04 Effortless multi-machine syncing with git + flakes \ud83d\udda5\ufe0f\ud83d\udcbb\ud83d\udcf1</li> <li>\ud83c\udfaf Precise control over software versions and dependencies \ud83d\udd0d\ud83d\udce6</li> <li>\ud83d\ude80 Seamless integration with systemd, Wayland, and Wayland-native tools \ud83c\udf89\ud83d\uddbc\ufe0f</li> </ul>"},{"location":"nix/#tldr","title":"TL;DR \u26a1","text":"<p>Nix is the backbone \ud83e\uddb4 of my environment \u2014 powering a reproducible, flexible, and fully declarative setup that evolves with me. \ud83c\udf31\ud83d\udd25</p>"},{"location":"philosophy/","title":"Philosophy Behind My Dotfiles \ud83e\udde0\ud83d\udca1\ud83d\udd25","text":"<p>These dotfiles aren\u2019t just config files \u2014 they represent a way of thinking about computing, productivity, and flow. Here\u2019s the core philosophy fueling every line and choice in this setup:</p>"},{"location":"philosophy/#minimalism-purposeful-design","title":"\ud83c\udfaf Minimalism &amp; Purposeful Design \ud83e\uddf9\u2728","text":"<ul> <li> <p>Less is more.   I only include what\u2019s absolutely necessary \u2014 no bloat, no unnecessary plugins or features. Every setting, script, and tool has a clear purpose. \ud83c\udfaf</p> </li> <li> <p>Simplicity breeds maintainability.   Clean, readable, and modular configs make it easier to update, debug, and understand my environment. \ud83d\udcdc\ud83d\udd0d</p> </li> </ul>"},{"location":"philosophy/#speed-efficiency","title":"\ud83d\ude80 Speed &amp; Efficiency \u26a1\u23f1\ufe0f","text":"<ul> <li> <p>Fast startup, fast workflows.   My environment loads quickly, and every keybind or command is designed to save time and reduce friction. \ud83c\udfc3\u200d\u2642\ufe0f\ud83d\udca8</p> </li> <li> <p>Keyboard-centric control.   I avoid mouse dependence whenever possible. Keyboard-driven workflows boost focus and speed. \u2328\ufe0f\ud83d\udd25</p> </li> </ul>"},{"location":"philosophy/#reproducibility-portability","title":"\ud83d\udd04 Reproducibility &amp; Portability \ud83c\udf0d\ud83d\udce6","text":"<ul> <li> <p>Infrastructure as code.   Using Nix and Home Manager, my entire system is declarative and reproducible across machines. I can set up a new machine with a single command. \ud83e\udd16\ud83d\udee0\ufe0f</p> </li> <li> <p>Version control everything.   All configs live in Git, so changes are tracked, reversible, and sharable. \ud83d\udcda\ud83d\udd04</p> </li> </ul>"},{"location":"philosophy/#stability-reliability","title":"\ud83d\udee1\ufe0f Stability &amp; Reliability \ud83e\uddf1\ud83d\udd12","text":"<ul> <li> <p>Keep it solid.   I favor stable, well-supported tools and avoid overly experimental features that could break my workflow. \ud83d\udee0\ufe0f\u2705</p> </li> <li> <p>Automate repetitive tasks.   Scripts and helpers reduce manual steps and errors. \ud83e\udd16\u2699\ufe0f</p> </li> </ul>"},{"location":"philosophy/#continuous-improvement","title":"\ud83c\udf31 Continuous Improvement \ud83d\udcc8\ud83d\udd27","text":"<ul> <li> <p>Always learning, always refining.   My dotfiles evolve as I discover better tools, learn new techniques, and refine my workflow. \ud83d\udcda\ud83d\udca1</p> </li> <li> <p>Open-source mindset.   Sharing and collaborating helps me grow and contributes to the community. \ud83e\udd1d\ud83c\udf10</p> </li> </ul> <p>Thanks for exploring the philosophy behind my setup! \ud83d\ude4f\u2728  </p>"},{"location":"qtile/","title":"Qtile Window Manager \ud83e\ude9f\u26a1","text":"<p>This is the heart of my keyboard-driven workflow: Qtile, a dynamic tiling window manager written in Python \ud83d\udc0d \u2014 customized heavily to work perfectly with Wayland \ud83d\ude80 and my NixOS setup \u2744\ufe0f.</p>"},{"location":"qtile/#why-qtile","title":"\ud83d\udee0\ufe0f Why Qtile?","text":"<ul> <li>Python-powered \ud83d\udc0d: Easy to extend and customize exactly how I want.  </li> <li>Wayland backend \ud83d\ude80: Experimental but modern, providing smooth rendering, security \ud83d\udd12, and better input handling.  </li> <li>Keyboard-centric \u2328\ufe0f: Everything can be controlled without touching the mouse \ud83d\uddb1\ufe0f \u2014 speed and focus all the way.  </li> <li>Dynamic tiling \ud83e\udde9: Windows automatically arranged for maximum efficiency.</li> </ul>"},{"location":"qtile/#key-config-details","title":"\u2699\ufe0f Key Config Details","text":""},{"location":"qtile/#mod-key-core-apps","title":"Mod Key &amp; Core Apps \ud83d\udd11","text":"<ul> <li><code>mod4</code> (Super/Windows key) as the main modifier.  </li> <li>Terminal: I daily drive Ghostty \ud83d\udc7b but have <code>footclient</code> \ud83e\uddb6 as fallback.  </li> <li>Browser: <code>librewolf</code> \ud83e\udd8a \u2014 privacy-focused and open source.  </li> <li>Launcher: <code>rofi -show drun</code> \ud83d\ude80 for app launching.  </li> <li>File manager: <code>thunar</code> \ud83d\udcc1.  </li> <li>Editor: <code>nvim</code> inside terminal \u270d\ufe0f.  </li> <li>Notification center: <code>swaync-client</code> \ud83d\udd14.</li> </ul>"},{"location":"qtile/#autostart-hooks","title":"Autostart Hooks \ud83d\udd25","text":"<p>On startup, the config launches essential services and utilities to keep the system smooth and ready:</p> <ul> <li>\ud83c\udfa7 <code>systemctl --user restart pipewire</code> \u2014 Audio server for sound management  </li> <li>\ud83d\udd35 <code>blueman-applet</code> \u2014 Bluetooth tray applet for easy device control  </li> <li>\ud83d\udcbe <code>udiskie</code> \u2014 Automatic mounting for removable drives  </li> <li>\ud83d\udcf8 <code>flameshot</code> \u2014 Screenshot tool ready to capture on demand  </li> <li>\ud83c\udfaf <code>focus-mode</code> \u2014 Custom script to minimize distractions and enhance productivity  </li> <li>\ud83d\udcca <code>conky -c ~/.config/conky/conky-qtile.conf</code> \u2014 System monitor with stats and info displayed</li> </ul> <p>If running on Wayland:</p> <ul> <li>\ud83e\uddb6 <code>foot --server</code> \u2014 Start Foot terminal server for Wayland native terminal  </li> <li>\ud83d\uddbc\ufe0f <code>swww-daemon</code> \u2014 Wallpaper daemon to manage backgrounds smoothly  </li> <li>\ud83c\udfa8 <code>wallrandom</code> \u2014 Script to randomize wallpapers on startup  </li> </ul> <p>If host is desktop:</p> <ul> <li>\ud83e\udd8a <code>librewolf</code> \u2014 Launch privacy-focused browser  </li> <li>\ud83c\udfae <code>discord --disable-gpu</code> \u2014 Start Discord with GPU acceleration disabled for stability  </li> </ul>"},{"location":"qtile/#fullscreen-rules","title":"Fullscreen Rules \ud83c\udfac","text":"<p>Certain apps like <code>flameshot</code> \ud83d\udcf8 automatically open fullscreen to avoid interruptions.</p>"},{"location":"qtile/#keybindings-breakdown","title":"\u2328\ufe0f Keybindings Breakdown","text":"<ul> <li>Navigation: <code>mod + h/j/k/l</code> \ud83d\udd00 to move focus left/down/up/right.  </li> <li>Window shuffle: <code>mod + shift + h/j/k/l</code> \ud83d\udd04 moves windows around.  </li> <li>Resize: <code>mod + ctrl + j/k</code> \ud83d\udccf to shrink or grow windows.  </li> <li>Toggle fullscreen: <code>mod + f</code> \ud83d\udda5\ufe0f.  </li> <li>Toggle floating: <code>mod + shift + space</code> \ud83c\udf0a.  </li> <li>Spawn terminal, browser, launcher, file manager, editor, color picker \ud83c\udfa8, screenshot tool \ud83d\udcf8, and notification center \ud83d\udd14 with easy combos.  </li> <li>Volume \ud83d\udd0a, brightness \ud83c\udf1e, media \ud83c\udfb5 keys mapped for quick control.  </li> <li>Special <code>mod + m</code> toggles Do Not Disturb mode \ud83d\udeab\ud83d\udd14 via a custom function.</li> </ul>"},{"location":"qtile/#groups-workspaces","title":"\ud83d\uddc2\ufe0f Groups &amp; Workspaces","text":"<ul> <li>Numeric groups <code>0-9</code> \ud83d\udd22 plus a scratchpad with dropdowns for Spotify \ud83c\udfa7 and terminal \ud83e\uddb6.  </li> <li>Specific matching rules send apps to designated groups automatically:  </li> <li>Browsers (Firefox, Librewolf, Vivaldi) \ud83c\udf10 go to group 2.  </li> <li>Obsidian notes app \ud83d\udcdd to group 4.  </li> <li>Discord \ud83c\udfae to group 9.  </li> <li> <p>Steam \ud83c\udfb2 to group 0.</p> </li> <li> <p>Keybindings let you switch groups \ud83d\udd00 or move windows \u2194\ufe0f between them.</p> </li> </ul>"},{"location":"qtile/#layouts","title":"\ud83d\udda5\ufe0f Layouts","text":"<ul> <li>Using mostly MonadTall \ud83c\udfe2 for tiling \u2014 clean and efficient vertical stacking.  </li> <li>Other layouts like Columns \ud83d\udfe6, Max \ud83d\udd32, Stack \ud83d\uddc2\ufe0f, Bsp \ud83c\udf3f, etc. are commented out but ready to be enabled.</li> </ul>"},{"location":"qtile/#widgets-bar","title":"\ud83d\udcca Widgets &amp; Bar","text":"<ul> <li>Stylish powerline decorations \u26a1 with custom colors matching my theme \ud83c\udfa8.  </li> <li>Shows current group, layout, window name \ud83e\ude9f, search box \ud83d\udd0d, system tray \ud83d\udece\ufe0f, memory \ud83e\udde0, battery \ud83d\udd0b, volume \ud83d\udd09, keyboard layout \u2328\ufe0f, and clock \u23f0.  </li> <li>Responsive to laptop \ud83d\udcbb vs desktop \ud83d\udda5\ufe0f (some widgets get removed on laptop).  </li> <li>Interactive logos and click callbacks (e.g., open NixOS Wiki \ud83d\udcda on logo click).</li> </ul>"},{"location":"qtile/#mouse-controls","title":"\ud83d\uddb1\ufe0f Mouse Controls","text":"<ul> <li>Drag floating windows with <code>mod + left-click</code> \ud83d\uddb1\ufe0f or resize with <code>mod + right-click</code> \u2194\ufe0f.  </li> <li>Bring window to front with <code>mod + middle-click</code> \ud83d\udd1d.</li> </ul>"},{"location":"qtile/#additional-config","title":"\ud83d\udd27 Additional Config","text":"<ul> <li>Wayland input settings tuned for flat acceleration profiles \u2699\ufe0f.  </li> <li>Custom cursor theme <code>Nordzy-cursors</code> \ud83d\uddb1\ufe0f.  </li> <li><code>wmname</code> set to <code>QTILE</code> for Java UI compatibility \u2615.</li> </ul>"},{"location":"terminal/","title":"Terminal Setup \ud83d\udda5\ufe0f\ud83d\udd25\u2328\ufe0f","text":"<p>My terminal is the command center \ud83d\udd79\ufe0f for everything \u2014 fast, minimal, and powerful, perfectly tuned for Wayland and NixOS.</p>"},{"location":"terminal/#shells-emulators","title":"\ud83d\udc1a Shells &amp; Emulators \u26a1","text":"<ul> <li> <p>Terminal Emulators</p> </li> <li> <p>Ghostty \ud83d\udc7b: GPU-accelerated terminal with great features for heavier workflow.s</p> </li> <li> <p>Foot \ud83e\uddb6: Wayland-native terminal \u2014 blazing fast, minimal, and smooth. Used mostly as fallback.</p> </li> <li> <p>Shells</p> </li> <li> <p>Fish shell \ud83d\udc20: Friendly, smart completions, and beautiful by default.</p> </li> <li>Zsh \ud83e\udda6: Powerful scripting and compatibility for legacy tools.</li> </ul>"},{"location":"terminal/#configuration-highlights","title":"\u2699\ufe0f Configuration Highlights \ud83d\udee0\ufe0f","text":"<ul> <li> <p>Wayland-First Approach \ud83d\ude80   My terminal ecosystem is designed primarily for Wayland, enabling smooth GPU acceleration and better integration with modern Linux graphics stacks.</p> </li> <li> <p>Aliases &amp; Scripts \ud83e\uddf0</p> <ul> <li>A custom <code>showalias</code> alias that neatly lists all my aliases for quick lookup and reference \u2014 keeps my workflow tight and efficient.</li> <li>Plenty of handy scripts automate daily tasks and system tweaks, making the terminal a powerful toolbox.</li> </ul> </li> <li> <p>Prompt &amp; UI</p> <ul> <li>Powered by Starship \u2b50 for a fast, minimal, and informative prompt that works well across shells.</li> <li>Fonts: JetBrains Mono Nerd Font for clean and readable glyphs and icons. \ud83d\udd24</li> </ul> </li> <li> <p>Clipboard &amp; Clipboard Managers \ud83d\udccb</p> <ul> <li>Full integration with Wayland clipboard utilities (<code>wl-copy</code>, <code>wl-paste</code>) for seamless copy-paste in scripts and workflows.</li> </ul> </li> </ul>"},{"location":"terminal/#visual-accessibility","title":"\ud83c\udfa8 Visual &amp; Accessibility","text":"<ul> <li> <p>Color Schemes   Consistent with the dotfiles\u2019 overall Nord + Everforest theme for eye comfort and clarity. \ud83c\udfa8\u2744\ufe0f\ud83c\udf32</p> </li> <li> <p>Fonts &amp; Glyphs   JetBrains Mono Nerd Font with ligatures and icons for a slick coding experience. \ud83d\udd20\u2728</p> </li> <li> <p>Smooth Scrolling &amp; Input   Wayland-native terminals + Fish shell provide buttery smooth interaction. \ud83e\uddc8</p> </li> </ul>"},{"location":"terminal/#tldr","title":"TL;DR","text":"<p>Fast, minimal, Wayland-native terminals with a custom alias system and powerful scripts \u2014 all tuned for productivity and style.</p> <p>Ready to own the terminal? \ud83d\udca5\ud83d\ude80</p>"},{"location":"usage/","title":"\ud83d\ude80 Daily Usage \u2014 My Flow \ud83d\udcbb\ud83c\udf19\u2615","text":"<p>Welcome to the cheat sheet of how I actually use my machine on a daily basis \u2014 optimized for speed, clarity, and focus. \ud83e\udde0\u26a1</p>"},{"location":"usage/#desktop-environment-wayland-qtile","title":"\ud83d\udda5\ufe0f Desktop Environment (Wayland + Qtile) \ud83c\udf9b\ufe0f\ud83c\udf10","text":"<p>I use Qtile Wayland as my main compositor + WM \u2014 custom-built with my own config. I\u2019ve decorated it with \ud83d\udd37 Nord theme, powerline widgets, and intuitive keybindings.</p>"},{"location":"usage/#workspace-usage","title":"\ud83d\udcc2 Workspace Usage","text":"<ul> <li><code>1</code> \u2014 Code \ud83d\udc68\u200d\ud83d\udcbb (Neovim, Git)</li> <li><code>2</code> \u2014 Web \ud83c\udf0d (Firefox, Librewolf, Brave...)</li> <li><code>3</code> \u2014 Terminals \ud83d\udda5\ufe0f (htop, scripts, etc.)</li> <li><code>4</code> \u2014 Docs \ud83d\udcda (PDFs, notes, Zathura)</li> <li><code>5+</code> \u2014 Scratch or task-specific</li> </ul>"},{"location":"usage/#workflow-habits","title":"\ud83e\udde0 Workflow Habits","text":"<ul> <li>Always boot into a clean state thanks to <code>nixos-rebuild</code> magic \u2728</li> <li>I rarely reboot \u2014 my uptime is often \ud83d\uddd3\ufe0f multiple days</li> <li>I don\u2019t close terminals \u2014 I live in them \ud83e\uddd8\u200d\u2642\ufe0f</li> <li>No distractions \u2014 no YouTube, no games, just Vim &amp; chill \ud83c\udf43</li> </ul>"},{"location":"usage/#coding-flow","title":"\ud83d\udd27 Coding Flow","text":""},{"location":"usage/#editor-neovim","title":"\ud83e\udd77 Editor: Neovim","text":"<ul> <li><code>nvim</code> with Lua config + custom plugin loadout \ud83d\udd0c</li> <li>LSPs + Treesitter = buttery smooth coding \ud83c\udf70</li> <li><code>telescope</code> to fuzzy-find everything \ud83e\udded</li> <li><code>alpha-nvim</code> for startup dashboard \ud83d\udcab</li> </ul>"},{"location":"usage/#project-management","title":"\ud83d\udcc1 Project Management","text":"<ul> <li>Git all the way \ud83e\uddec</li> <li><code>lazygit</code> for commits and merges \u2694\ufe0f</li> <li>Nix flake-based repos for everything \u2014 no <code>pip</code>, no <code>npm</code>, no clutter \u2744\ufe0f</li> </ul>"},{"location":"usage/#terminal-usage","title":"\ud83d\uddb1\ufe0f Terminal Usage","text":"<ul> <li>Kitty as my terminal \u2014 minimal, fast, and themed \ud83d\udca8\ud83c\udfa8</li> <li>Scripts in <code>$HOME/.config/scripts/</code> do most of the grunt work \ud83e\udd16</li> <li>Aliases displayed via <code>aliases</code> command for clarity \ud83d\udcdc</li> <li>I don\u2019t use tmux resurrect \u2014 I script my own recovery when needed \ud83e\udde0</li> </ul>"},{"location":"usage/#favorite-commands","title":"\u26a1 Favorite Commands","text":"Alias What it does <code>hs</code> <code>nh home switch ~/Dotfiles</code> \u21ba instantly reload \ud83c\udfe1 <code>garbage</code> <code>nh clean all</code> \ud83e\uddf9 deep clean \ud83e\uddfc <code>fetch</code> <code>fastfetch</code> for showing system info \ud83d\udcca <code>ns</code> <code>nix-shell --command fish</code> \ud83d\udc1a for temporary envs <code>cd z</code> Quick cd into my zettelkasten \ud83d\udcd3"},{"location":"usage/#autostarted-stuff","title":"\ud83d\udcdc Autostarted Stuff","text":"<ul> <li>\ud83e\ude9f Qtile + Wayland + XDG setup</li> <li>\ud83d\udda5\ufe0f Kitty with startup scripts</li> <li>\ud83e\udde0 Neovim ready to go</li> <li>\ud83e\uddfc Background cleaner for temp folders</li> <li>\ud83d\udcca Conky with keybinds cheat sheet</li> <li>\ud83e\uddea Custom scripts: keymap, backlight, battery, etc.</li> </ul>"},{"location":"usage/#philosophy","title":"\ud83e\uddd8\u200d\u2642\ufe0f Philosophy","text":"<p>\u201cI don\u2019t chase minimalism. I maintain it.\u201d</p> <p>Everything I run is fast, lean, and distraction-free. Nix handles the environment. I handle the flow. \u2699\ufe0f\ud83d\udca1</p>"},{"location":"wallpaper/","title":"\ud83c\udfa8 Wallpaper Integration \u2728\ud83d\uddbc\ufe0f","text":"<p>My dotfiles include seamless support for both \ud83c\udf0c Nord and \ud83c\udf32 Everforest wallpapers, dynamically managed through Nix flakes and tightly coupled with the current color scheme. Beautiful wallpapers, automatically in sync with your system theme. \ud83c\udf08\ud83d\ude80</p>"},{"location":"wallpaper/#flake-inputs","title":"\ud83d\udce6 Flake Inputs \ud83e\uddca\ud83c\udf3f","text":"<p>Both wallpaper collections are added as inputs in <code>flake.nix</code>:</p> <pre><code>{\n  inputs = {\n    nord-wallpapers = {\n      url = \"github:Gurjaka/Nord-Wallpapers\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n    };\n\n    everforest-wallpapers = {\n      url = \"github:Gurjaka/Everforest-Wallpapers\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n    };\n  };\n}\n</code></pre>"},{"location":"wallpaper/#home-manager-integration","title":"\ud83c\udfe1 Home Manager Integration \ud83d\udd17\ud83d\udcc2","text":"<p>In <code>home-manager/modules/theme/wallpapers.nix</code>, the contents of each repo are symlinked into <code>~/.config/wallpapers/</code>:</p> <pre><code>{ inputs, pkgs, ... }:\n\n{\n  home.file = {\n    \".config/wallpapers/nord/\" = {\n      source = inputs.nord-wallpapers.packages.\"${pkgs.system}\".default;\n      recursive = true;\n    };\n    \".config/wallpapers/everforest/\" = {\n      source = inputs.everforest-wallpapers.packages.\"${pkgs.system}\".default;\n      recursive = true;\n    };\n  };\n}\n</code></pre> <p>\ud83d\udcc1 This setup ensures all wallpapers are in one tidy location based on theme. \ud83e\uddfc\u2728</p>"},{"location":"wallpaper/#dynamic-wallpaper-switching-wallrandom","title":"\ud83d\udd01 Dynamic Wallpaper Switching (<code>wallrandom</code>) \ud83c\udfb2\ud83d\uddbc\ufe0f","text":"<p>A custom script called <code>wallrandom</code> randomly picks a wallpaper based on the current theme, then applies it using <code>swww</code> with a beautiful animated transition. \ud83c\udf20</p> <p>Defined in <code>wallrandom.nix</code>:</p> <pre><code>{ pkgs }:\n\npkgs.writeShellScriptBin \"wallrandom\" ''\n  set -e\n\n  FLAKE=$HOME/Dotfiles/flake.nix\n  FLAKE_DIR=$HOME/Dotfiles\n\n  # Detect current theme from flake.nix\n  current=$(grep 'colorscheme = \"' \"$FLAKE\" | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n\n  DIR=$HOME/.config/wallpapers/$current\n  PICS=($(ls ''${DIR}))\n  RANDOMPICS=''${PICS[ $RANDOM % ''${#PICS[@]} ]}\n\n  swww query || swww-daemon\n\n  swww img ''${DIR}/''${RANDOMPICS} \\\n    --transition-fps 165 \\\n    --transition-type grow \\\n    --transition-pos 0.2,0.2 \\\n    --transition-duration 1\n''\n</code></pre> <p>\ud83d\udd0d This script:</p> <ul> <li>\ud83d\udd0e Detects your current <code>colorscheme</code> from the flake</li> <li>\ud83c\udfb2 Picks a random wallpaper from the theme-matched folder</li> <li>\ud83c\udf04 Applies it with a smooth <code>swww</code> transition</li> </ul>"},{"location":"wallpaper/#usage","title":"\ud83e\uddea Usage \ud83d\udcbb\u26a1","text":"<p>Once <code>wallrandom</code> is in your <code>$PATH</code>, just run:</p> <pre><code>wallrandom\n</code></pre> <p>\ud83d\udca1 Pro Tip: Bind this to a keyboard shortcut in your WM for instant wallpaper shuffle magic. \ud83e\uddd9</p>"},{"location":"wallpaper/#related-repositories","title":"\ud83d\udcda Related Repositories","text":"<ul> <li>\ud83c\udf0c Nord Wallpapers \u2014 minimal &amp; icy</li> <li>\ud83c\udf32 Everforest Wallpapers \u2014 warm &amp; cozy</li> </ul> <p>These collections are handcrafted and curated with aesthetics and compatibility in mind. \ud83c\udfa8\ud83e\uddd8\u200d\u2642\ufe0f</p>"}]}